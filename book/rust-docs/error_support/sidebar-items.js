window.SIDEBAR_ITEMS = {"attr":[["handle_error","A procedural macro that exposes internal errors to external errors the consuming applications should handle. It requires that the internal error implements [`error_support::ErrorHandling`]."]],"fn":[["convert_log_report_error","Handle the specified “internal” error, taking any logging or error reporting actions and converting the error to the public error. Called by our `handle_error` macro so needs to be public."],["ffi_errorsupport_684e_rustbuffer_alloc",""],["ffi_errorsupport_684e_rustbuffer_free",""],["ffi_errorsupport_684e_rustbuffer_from_bytes",""],["ffi_errorsupport_684e_rustbuffer_reserve",""],["redact_compact_jwe","Redact compact jwe string (Five base64 segments, separated by `.` chars)"],["redact_url","Redact a URL."],["report_breadcrumb",""],["report_error_to_app",""],["set_application_error_reporter",""],["unset_application_error_reporter",""]],"macro":[["breadcrumb","Tell the application to log a breadcrumb"],["define_error","All the error boilerplate (okay, with a couple exceptions in some cases) in one place."],["define_error_conversions","Define a set of conversions from external error types into the provided error kind. Use `define_error` to do this at the same time as `define_error_wrapper`."],["define_error_wrapper","XXX - Most of this is now considered deprecated - only FxA uses it, and should be replaced with the facilities in the `handling` module. Define a wrapper around the the provided ErrorKind type. See also `define_error` which is more likely to be what you want."],["report_error","Tell the application to report an error"],["trace_error","Log a breadcrumb if we see an `Result::Err` value"],["uniffi_reexport_scaffolding",""]],"mod":[["backtrace","A compatibility shim for `backtrace`."]],"struct":[["ErrorHandling","Specifies how an “internal” error is converted to an “external” public error and any logging or reporting that should happen."],["ErrorReporting","Describes what error reporting action should be taken."]],"trait":[["ApplicationErrorReporter","Application error reporting trait"],["GetErrorHandling","A trait to define how errors are converted and reported."]]};